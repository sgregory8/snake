{"version":3,"sources":["SnakeBody.js","Food.js","Score.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeSegments","map","segment","i","style","left","top","className","key","food","score","App","state","gameOver","direction","nextSegment","foodCoords","segmentsToAdd","onKeyDown","e","window","event","setState","keyCode","console","log","moveSnake","snake","slice","head","newHead","newSnake","forEach","pop","checkSnakeCollision","addSegmentIfNeeded","checkNotInBounds","snakeCoords","checkFoodEaten","segmentToAdd","push","matchFound","generateRandomCoords","snakeBody","x","Math","floor","random","y","snakeHead","shift","resetState","document","onkeydown","this","setInterval","Food","SnakeBody","Score","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc1bf610.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default props => {\n  return (\n    <div>\n      {props.snakeSegments.map((segment, i) => {\n        const style = {\n          left: `${segment[0]}%`,\n          top: `${segment[1]}%`\n        };\n        return <div className=\"snake-segment\" key={i} style={style}></div>;\n      })}\n   </div>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n\nconst style = {\n  left: `${props.food[0]}%`,\n  top: `${props.food[1]}%`\n}\n\n  return (\n    <div>\n        <div className=\"food-piece\" style={style}></div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n\n  const style = {\n    left: 0,\n    top: 450\n  }\n\n  return (\n    <div>\n      <div className=\"score\" style={style}>Score: {props.score}</div>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport SnakeBody from \"./SnakeBody\";\nimport Food from \"./Food\";\nimport Score from \"./Score\";\n\nclass App extends Component {\n  state = {\n    gameOver: true,\n    direction: null,\n    snakeSegments: [[48, 48], [44, 48], [40, 48]],\n    nextSegment: null,\n    foodCoords: null,\n    segmentsToAdd: [],\n    score: 0\n  };\n\n  componentDidMount() {\n    document.onkeydown = this.onKeyDown;\n    setInterval(this.moveSnake, 50);\n  }\n\n  componentDidUpdate() {\n    if (this.state.foodCoords === null && !this.state.gameOver) {\n      const foodCoords = this.generateRandomCoords();\n      this.setState({\n        foodCoords: foodCoords\n      });\n    }\n    if (this.checkNotInBounds(this.state.snakeSegments[0])) {\n      this.resetState();\n    }\n  }\n\n  onKeyDown = e => {\n    e = e || window.event;\n    if (this.state.gameOver) {\n      this.setState({\n        gameOver: false\n      })\n    }\n    switch (e.keyCode) {\n      case 38:\n        console.log(\"up\");\n        this.setState({ direction: \"UP\" });\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        break;\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        break;\n    }\n  };\n\n  moveSnake = () => {\n    if (this.state.direction != null && !this.state.gameOver) {\n      const spacingUnit = 4;\n      const direction = this.state.direction;\n      const snake = this.state.snakeSegments.slice();\n      const head = [...this.state.snakeSegments[0]];\n      var newHead = head;\n      var newSnake = [];\n      switch (direction) {\n        case \"UP\":\n          newHead[1] = head[1] - spacingUnit;\n          break;\n        case \"DOWN\":\n          newHead[1] = head[1] + spacingUnit;\n          break;\n        case \"LEFT\":\n          newHead[0] = head[0] - spacingUnit;\n          break;\n        case \"RIGHT\":\n          newHead[0] = head[0] + spacingUnit;\n          break;\n      }\n      newSnake[0] = newHead;\n      snake.forEach((segment, i) => {\n        newSnake[i + 1] = segment;\n      });\n      newSnake.pop();\n      this.setState({\n        snakeSegments: newSnake\n      });\n      this.checkSnakeCollision();\n      this.addSegmentIfNeeded();\n    }\n  };\n\n  checkNotInBounds = snakeCoords => {\n    if (snakeCoords[0] > 96 || snakeCoords[0] < 0) {\n      return true;\n    } else if (snakeCoords[1] > 96 || snakeCoords[1] < 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  checkFoodEaten = () => {\n    if (this.state.foodCoords === null) {\n      return;\n    } else if (\n      this.state.snakeSegments[0][0] === this.state.foodCoords[0] &&\n      this.state.snakeSegments[0][1] === this.state.foodCoords[1]\n    ) {\n      this.setState({\n        foodCoords: null,\n        score: this.state.score + 1\n      });\n      return [this.state.snakeSegments[0][0], this.state.snakeSegments[0][1]];\n    }\n    return false;\n  };\n\n  addSegmentIfNeeded = () => {\n    const segmentToAdd = this.checkFoodEaten();\n    if (segmentToAdd) {\n      this.state.segmentsToAdd.push(segmentToAdd);\n      let matchFound = false;\n      this.state.snakeSegments.forEach(segment => {\n        if (segment[0] === segmentToAdd[0] && segment[1] === segmentToAdd[1]) {\n          matchFound = true;\n        }\n      });\n      if (matchFound) {\n        const newSnake = [...this.state.snakeSegments];\n        newSnake.push(segmentToAdd);\n        this.setState({\n          snakeSegments: newSnake\n        });\n      }\n    }\n  };\n\n  generateRandomCoords = () => {\n    const snakeBody = this.state.snakeSegments;\n    const spacingUnit = 4;\n    let x = Math.floor(Math.random() * (96 / spacingUnit)) * spacingUnit;\n    let y = Math.floor(Math.random() * (96 / spacingUnit)) * spacingUnit;\n    snakeBody.forEach(segment => {\n      if (segment[0] === x && segment[1] === y) {\n        this.generateRandomCoords();\n      }\n    });\n    return [x, y];\n  };\n\n  checkSnakeCollision = () => {\n    const snakeHead = [...this.state.snakeSegments[0]];\n    const snake = [...this.state.snakeSegments];\n    snake.shift();\n    snake.forEach(segment => {\n      if (segment[0] == snakeHead[0] && segment[1] == snakeHead[1]) {\n        this.resetState();\n      }\n    });\n  };\n\n  resetState = () => {\n    this.setState({\n      gameOver: true,\n      direction: null,\n      snakeSegments: [[48, 48], [44, 48], [40, 48]],\n      foodCoords: null,\n      score: 0\n    });\n  };\n\n  render() {\n    let food;\n    if (this.state.foodCoords != null) {\n      food = <Food food={this.state.foodCoords} />;\n    }\n\n    return (\n      <div className=\"game-grid\">\n        <SnakeBody snakeSegments={this.state.snakeSegments}></SnakeBody>\n        {food}\n        <Score score={this.state.score}></Score>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}